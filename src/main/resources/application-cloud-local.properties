# THIS FILE IS USED BY SPRING CLOUD CONFIG SERVER.
# IT WORKS LIKE THE NORMAL APPLICATION PROPERTIES

# Now this is mandatory. We can prefix with Optional
spring.config.import=configserver:

## ENABLE CLOUD CONFIG
spring.cloud.config.enabled=true

## ENABLE DISCOVERY
#spring.cloud.discovery.enabled=true
spring.cloud.config.discovery.enabled=true
spring.cloud.config.import-check.enabled=true

## THIS IS THE NAME OF OR SPRING CLOUD CONFIGURATION APPLICATION NAME
spring.cloud.config.discovery.service-id=mssc-config-server

spring.cloud.config.fail-fast=true
spring.cloud.config.retry.max-attempts=30
spring.cloud.config.retry.max-interval=1500
spring.cloud.config.retry.multiplier=1.2
spring.cloud.config.retry.initial-interval=1100

## ###################################################
## OpenFeign Configuration
## ###################################################
spring.cloud.openfeign.circuitbreaker.enabled=true

## ###################################################
## Basic Auth Configuration
##
## These should inject via ENV
## NOTE: Since this is a client it uses the spring cloud config properties
##       Pay attention to not use the Spring Security properties
## ###################################################
spring.cloud.config.username=MyUserName
spring.cloud.config.password=MySecretPassword

## ###################################################
## Eureka Client Discovery Configuration
## ###################################################
eureka.client.service-url.defaultZone=http://netflix:eureka@localhost:8761/eureka

## ###################################################
## Distributed Tracing Configuration
##
## Zipkin works with Micrometer to provide a
## distributed tracing system
## Sleuth is no longer supported with Spring Boot 3.x
##
## Zipkin is a distributed tracing system.
## NEED a Zipkin Server
##  docker run --name zipkin -d -p 9411:9411 openzipkin/zipkin
## It helps gather timing data needed to troubleshoot latency problems in service architectures.
## Features include both the collection and lookup of this data.
## If you have a trace ID in a log file, you can jump directly to it.
## ###################################################
management.tracing.enabled=true
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-},%X{parentId:-},%X{sample:-}]